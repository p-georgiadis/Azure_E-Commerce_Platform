# CI/CD Pipeline for E-Commerce Platform
# Builds, tests, and deploys microservices to Azure Kubernetes Service
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - '.github/workflows/**'
      - 'infrastructure/k8s/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/**'
      - 'infrastructure/k8s/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  CLUSTER_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: ecommerce-platform

jobs:
  # Detect which services have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      product-service: ${{ steps.changes.outputs.product-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      payment-service: ${{ steps.changes.outputs.payment-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      frontend-service: ${{ steps.changes.outputs.frontend-service }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            product-service:
              - 'services/product-service/**'
            order-service:
              - 'services/order-service/**'
            payment-service:
              - 'services/payment-service/**'
            notification-service:
              - 'services/notification-service/**'
            frontend-service:
              - 'services/frontend/**'
            infrastructure:
              - 'infrastructure/k8s/**'
              - '.github/workflows/**'

  # Build and test Product Service
  product-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.product-service == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd services/product-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run linting
        run: |
          cd services/product-service
          pip install flake8 black isort
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
          black --check app/
          isort --check-only app/

      - name: Run tests
        run: |
          cd services/product-service
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/product-service/coverage.xml
          flags: product-service

      - name: Build Docker image
        run: |
          cd services/product-service
          docker build -t ${{ env.REGISTRY }}/product-service:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/product-service:latest .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/product-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/product-service:latest

  # Build and test Order Service
  order-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.order-service == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/order-service/package-lock.json

      - name: Install dependencies
        run: |
          cd services/order-service
          npm ci

      - name: Run linting
        run: |
          cd services/order-service
          npm run lint

      - name: Run type checking
        run: |
          cd services/order-service
          npm run type-check

      - name: Run tests
        run: |
          cd services/order-service
          npm run test:coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/order-service/coverage/lcov.info
          flags: order-service

      - name: Build Docker image
        run: |
          cd services/order-service
          docker build -t ${{ env.REGISTRY }}/order-service:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/order-service:latest .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/order-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/order-service:latest

  # Build and test Payment Service
  payment-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.payment-service == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd services/payment-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run linting
        run: |
          cd services/payment-service
          pip install flake8 black isort
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
          black --check app/
          isort --check-only app/

      - name: Run tests
        run: |
          cd services/payment-service
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/payment-service/coverage.xml
          flags: payment-service

      - name: Build Docker image
        run: |
          cd services/payment-service
          docker build -t ${{ env.REGISTRY }}/payment-service:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/payment-service:latest .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/payment-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/payment-service:latest

  # Build and test Notification Service
  notification-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.notification-service == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd services/notification-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run linting
        run: |
          cd services/notification-service
          pip install flake8 black isort
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
          black --check app/
          isort --check-only app/

      - name: Run tests
        run: |
          cd services/notification-service
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/notification-service/coverage.xml
          flags: notification-service

      - name: Build Docker image
        run: |
          cd services/notification-service
          docker build -t ${{ env.REGISTRY }}/notification-service:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/notification-service:latest .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/notification-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/notification-service:latest

  # Build and test Frontend Service
  frontend-service:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-service == 'true' || github.event.inputs.force_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd services/frontend
          npm ci

      - name: Run linting
        run: |
          cd services/frontend
          npm run lint

      - name: Run type checking
        run: |
          cd services/frontend
          npm run type-check

      - name: Run tests
        run: |
          cd services/frontend
          npm run test:coverage
        env:
          CI: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/frontend/coverage/lcov.info
          flags: frontend-service

      - name: Build application
        run: |
          cd services/frontend
          npm run build
        env:
          REACT_APP_API_URL: https://api.ecommerce-platform.com/api
          GENERATE_SOURCEMAP: false

      - name: Build Docker image
        run: |
          cd services/frontend
          docker build -t ${{ env.REGISTRY }}/frontend-service:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/frontend-service:latest .

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/frontend-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/frontend-service:latest

  # Deploy to environment
  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, product-service, order-service, payment-service, notification-service, frontend-service]
    if: always() && (contains(needs.*.result, 'success') || github.event.inputs.force_deploy == 'true')
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.5.7"

      - name: Update image tags
        run: |
          cd infrastructure/k8s/overlays/${{ matrix.environment }}
          
          # Update image tags to use commit SHA
          kustomize edit set image ${{ env.REGISTRY }}/product-service:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/order-service:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/payment-service:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/notification-service:${{ github.sha }}
          kustomize edit set image ${{ env.REGISTRY }}/frontend-service:${{ github.sha }}

      - name: Deploy to Kubernetes
        run: |
          cd infrastructure/k8s/overlays/${{ matrix.environment }}
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply the configuration
          kustomize build . | kubectl apply -f -
          
          # Wait for deployment to complete
          kubectl rollout status deployment/product-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/order-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/payment-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/notification-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/frontend-service -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/api-gateway -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify deployment
        run: |
          echo "Deployment verification:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          kubectl get ingress -n ${{ env.NAMESPACE }}
          
          # Check health endpoints
          echo "Health checks:"
          kubectl get pods -n ${{ env.NAMESPACE }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.phase}{"\n"}{end}'

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance testing (only on staging/prod)
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && contains('staging,prod', matrix.environment)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          BASE_URL: https://${{ matrix.environment == 'prod' && 'ecommerce-platform.com' || 'staging-ecommerce.example.com' }}